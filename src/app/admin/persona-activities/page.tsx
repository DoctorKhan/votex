'use client';

import React, { useState, useEffect } from 'react';
import { 
  getPersonaActivities, 
  getPersonaProposals,
  getPersonaComments,
  type PersonaActivity,
  type PersonaProposal,
  type PersonaComment
} from '../../../utils/personaDataUtils';
import DataConsistencyChecker from '../../../components/DataConsistencyChecker';

const ActivityHistoryPage = () => {
  const [activities, setActivities] = useState<PersonaActivity[]>([]);
  const [proposals, setProposals] = useState<PersonaProposal[]>([]);
  const [comments, setComments] = useState<PersonaComment[]>([]);
  const [activeTab, setActiveTab] = useState<'activities' | 'proposals' | 'comments'>('activities');
  const [sortOrder, setSortOrder] = useState<'newest' | 'oldest'>('newest');

  // Load data initially and set up listeners for updates
  useEffect(() => {
    // Initial data load
    const loadData = () => {
      setActivities(getPersonaActivities());
      setProposals(getPersonaProposals());
      setComments(getPersonaComments());
    };
    
    loadData();
    
    // Listen for storage events (when data is updated by PersonaController)
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === 'personaActivities') {
        setActivities(getPersonaActivities());
      } else if (e.key === 'personaProposals') {
        setProposals(getPersonaProposals());
      } else if (e.key === 'personaComments') {
        setComments(getPersonaComments());
      }
    };
    
    window.addEventListener('storage', handleStorageChange);
    
    // Clean up listener
    return () => {
      window.removeEventListener('storage', handleStorageChange);
    };
  }, []);

  // Sort functions
  const sortedActivities = [...activities].sort((a, b) => 
    sortOrder === 'newest' ? b.timestamp - a.timestamp : a.timestamp - b.timestamp
  );
  
  const sortedProposals = [...proposals].sort((a, b) => 
    sortOrder === 'newest' ? b.createdAt - a.createdAt : a.createdAt - b.createdAt
  );
  
  const sortedComments = [...comments].sort((a, b) => 
    sortOrder === 'newest' ? b.createdAt - a.createdAt : a.createdAt - b.createdAt
  );

  // Format date for display
  const formatDate = (timestamp: number): string => {
    return new Date(timestamp).toLocaleString();
  };

  // Format the vote count for proposals
  const formatVoteCount = (proposal: PersonaProposal): string => {
    if (!proposal.votes || proposal.votes.length === 0) return 'No votes';
    
    const approveCount = proposal.votes.filter(v => v.vote === 'approve').length;
    const rejectCount = proposal.votes.filter(v => v.vote === 'reject').length;
    const abstainCount = proposal.votes.filter(v => v.vote === 'abstain').length;
    
    return `${approveCount} approve, ${rejectCount} reject, ${abstainCount} abstain`;
  };

  return (
    <div className="max-w-7xl mx-auto p-4 md:p-6 lg:p-8">
      {/* Include the DataConsistencyChecker to ensure data integrity */}
      <DataConsistencyChecker />
      
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2 text-gray-900 dark:text-white">Persona Activities</h1>
        <p className="text-gray-600 dark:text-gray-400">
          Track all activities, proposals, and comments generated by AI personas in the system.
        </p>
      </div>
      
      {/* Tab Navigation */}
      <div className="flex border-b border-gray-200 dark:border-gray-700 mb-4">
        <button
          className={`px-4 py-2 border-b-2 ${
            activeTab === 'activities'
              ? 'border-blue-500 text-blue-500'
              : 'border-transparent text-gray-500 hover:text-gray-700 dark:hover:text-gray-300'
          }`}
          onClick={() => setActiveTab('activities')}
        >
          Activities
        </button>
        <button
          className={`px-4 py-2 border-b-2 ${
            activeTab === 'proposals'
              ? 'border-blue-500 text-blue-500'
              : 'border-transparent text-gray-500 hover:text-gray-700 dark:hover:text-gray-300'
          }`}
          onClick={() => setActiveTab('proposals')}
        >
          Proposals
        </button>
        <button
          className={`px-4 py-2 border-b-2 ${
            activeTab === 'comments'
              ? 'border-blue-500 text-blue-500'
              : 'border-transparent text-gray-500 hover:text-gray-700 dark:hover:text-gray-300'
          }`}
          onClick={() => setActiveTab('comments')}
        >
          Comments
        </button>
      </div>
      
      {/* Sort Order Control */}
      <div className="flex justify-end mb-4">
        <div className="flex items-center">
          <span className="text-sm text-gray-600 dark:text-gray-400 mr-2">Sort:</span>
          <select
            value={sortOrder}
            onChange={(e) => setSortOrder(e.target.value as 'newest' | 'oldest')}
            className="border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 rounded-md px-2 py-1 text-sm text-gray-700 dark:text-gray-200"
          >
            <option value="newest">Newest first</option>
            <option value="oldest">Oldest first</option>
          </select>
        </div>
      </div>
      
      {/* Activities Tab Content */}
      {activeTab === 'activities' && (
        <div>
          {sortedActivities.length > 0 ? (
            <div className="space-y-4">
              {sortedActivities.map((activity, idx) => (
                <div key={idx} className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow border-l-4 border-blue-500">
                  <div className="flex justify-between items-start mb-2">
                    <div>
                      <h3 className="font-medium text-gray-900 dark:text-white">
                        {activity.personaName}
                      </h3>
                      <span className="text-sm text-gray-500 dark:text-gray-400">
                        {formatDate(activity.timestamp)}
                      </span>
                    </div>
                    <span className={`text-xs px-2 py-1 rounded-full ${
                      activity.action === 'proposal'
                        ? 'bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-300' 
                        : activity.action === 'vote'
                          ? 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-300'
                          : 'bg-teal-100 dark:bg-teal-900/30 text-teal-800 dark:text-teal-300'
                    }`}>
                      {activity.action}
                    </span>
                  </div>
                  <p className="text-gray-700 dark:text-gray-300 mb-2">{activity.description}</p>
                  {activity.details && (
                    <div className="text-sm text-gray-600 dark:text-gray-400 mt-2 italic">
                      &ldquo;{activity.details.length > 100 ? `${activity.details.substring(0, 100)}...` : activity.details}&rdquo;
                    </div>
                  )}
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center p-8 bg-gray-50 dark:bg-gray-800 rounded-lg border border-dashed border-gray-300 dark:border-gray-700">
              <p className="text-gray-600 dark:text-gray-400">No activities recorded yet</p>
              <p className="mt-1 text-sm text-gray-500 dark:text-gray-500">
                Head to the Persona Control Panel to activate personas and generate activities
              </p>
            </div>
          )}
        </div>
      )}
      
      {/* Proposals Tab Content */}
      {activeTab === 'proposals' && (
        <div>
          {sortedProposals.length > 0 ? (
            <div className="space-y-6">
              {sortedProposals.map((proposal) => (
                <div key={proposal.id} className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
                  <div className="flex justify-between items-start mb-4">
                    <h3 className="text-xl font-semibold text-gray-900 dark:text-white">{proposal.title}</h3>
                    <span className={`px-2 py-1 text-sm rounded ${
                      proposal.status === 'active'
                        ? 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300'
                        : proposal.status === 'completed'
                          ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300'
                          : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300'
                    }`}>
                      {proposal.status.charAt(0).toUpperCase() + proposal.status.slice(1)}
                    </span>
                  </div>
                  
                  <div className="mb-3 flex items-center text-sm text-gray-600 dark:text-gray-400">
                    <span>Proposed by <strong>{proposal.authorName}</strong></span>
                    <span className="mx-2">â€¢</span>
                    <span>{formatDate(proposal.createdAt)}</span>
                  </div>
                  
                  <p className="text-gray-700 dark:text-gray-300 mb-4">{proposal.description}</p>
                  
                  <div className="border-t border-gray-200 dark:border-gray-700 pt-4 mt-4">
                    <h4 className="font-medium text-gray-900 dark:text-white mb-2">Votes ({proposal.votes.length})</h4>
                    <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                      {formatVoteCount(proposal)}
                    </div>
                    
                    {proposal.votes.length > 0 ? (
                      <div className="space-y-3 mt-3">
                        {proposal.votes.map((vote, idx) => (
                          <div key={idx} className="bg-gray-50 dark:bg-gray-700 p-3 rounded border-l-4 border-blue-500">
                            <div className="flex justify-between mb-1">
                              <span className="font-medium text-gray-800 dark:text-white">{vote.personaName}</span>
                              <span className={`text-xs px-2 py-0.5 rounded-full ${
                                vote.vote === 'approve'
                                  ? 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300'
                                  : vote.vote === 'reject'
                                    ? 'bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-300'
                                    : 'bg-gray-100 dark:bg-gray-600 text-gray-800 dark:text-gray-300'
                              }`}>
                                {vote.vote}
                              </span>
                            </div>
                            <p className="text-gray-700 dark:text-gray-300 text-sm">{vote.reasoning}</p>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <p className="text-sm text-gray-500 dark:text-gray-500 italic">No votes recorded yet</p>
                    )}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center p-8 bg-gray-50 dark:bg-gray-800 rounded-lg border border-dashed border-gray-300 dark:border-gray-700">
              <p className="text-gray-600 dark:text-gray-400">No proposals have been created yet</p>
              <p className="mt-1 text-sm text-gray-500 dark:text-gray-500">
                Head to the Persona Control Panel to generate proposals
              </p>
            </div>
          )}
        </div>
      )}
      
      {/* Comments Tab Content */}
      {activeTab === 'comments' && (
        <div>
          {sortedComments.length > 0 ? (
            <div className="space-y-4">
              {sortedComments.map((comment) => (
                <div key={comment.id} className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
                  <div className="flex justify-between items-start mb-2">
                    <div className="flex items-center">
                      <span className="font-medium text-gray-900 dark:text-white mr-2">{comment.authorName}</span>
                      <span className="text-sm text-gray-500 dark:text-gray-400">
                        {formatDate(comment.createdAt)}
                      </span>
                    </div>
                    <span className="text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300">
                      Thread: {comment.threadId.replace('thread-', '#')}
                    </span>
                  </div>
                  <p className="text-gray-700 dark:text-gray-300 mt-2">{comment.content}</p>
                  {comment.parentId && (
                    <div className="mt-2 text-xs text-gray-500 dark:text-gray-500">
                      Reply to comment {comment.parentId}
                    </div>
                  )}
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center p-8 bg-gray-50 dark:bg-gray-800 rounded-lg border border-dashed border-gray-300 dark:border-gray-700">
              <p className="text-gray-600 dark:text-gray-400">No comments have been posted yet</p>
              <p className="mt-1 text-sm text-gray-500 dark:text-gray-500">
                Head to the Persona Control Panel to generate comments
              </p>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default ActivityHistoryPage;