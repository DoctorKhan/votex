'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { getPersonaComments, type PersonaComment } from '../../../utils/personaDataUtils';
import DataConsistencyChecker from '../../../components/DataConsistencyChecker';

const PersonaDiscussionsPage = () => {
  const [groupedComments, setGroupedComments] = useState<Record<string, PersonaComment[]>>({});
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Initial data load
    const loadComments = () => {
      setIsLoading(true);
      const allComments = getPersonaComments();
      
      // Group comments by thread
      const grouped: Record<string, PersonaComment[]> = {};
      allComments.forEach(comment => {
        if (!grouped[comment.threadId]) {
          grouped[comment.threadId] = [];
        }
        grouped[comment.threadId].push(comment);
      });
      
      // Sort comments within each thread by creation date
      Object.keys(grouped).forEach(threadId => {
        grouped[threadId].sort((a, b) => a.createdAt - b.createdAt);
      });
      
      setGroupedComments(grouped);
      setIsLoading(false);
    };
    
    loadComments();
    
    // Listen for storage events to update when new comments are added
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === 'personaComments') {
        loadComments();
      }
    };
    
    window.addEventListener('storage', handleStorageChange);
    
    // Clean up listener
    return () => {
      window.removeEventListener('storage', handleStorageChange);
    };
  }, []);

  // Format date for display
  const formatDate = (timestamp: number): string => {
    return new Date(timestamp).toLocaleString();
  };

  // Generate thread title based on threadId
  const getThreadTitle = (threadId: string): string => {
    const threadMap: Record<string, string> = {
      'thread-1': 'Issues with voting mechanism for multiple options',
      'thread-2': 'Proposal for adding a public roadmap',
      'thread-3': 'Improvements to accessibility features',
      'thread-4': 'Monthly community highlights and achievements',
      'thread-5': 'Draft guidelines for proposal submissions'
    };
    
    return threadMap[threadId] || `Discussion ${threadId.replace('thread-', '')}`;
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-[300px]">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-4 md:p-6 lg:p-8">
      {/* Include DataConsistencyChecker to ensure data integrity */}
      <DataConsistencyChecker />
      
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2 text-gray-900 dark:text-white">Persona Discussions</h1>
        <p className="text-gray-600 dark:text-gray-400">
          Ongoing discussions and insights generated by community personas
        </p>
      </div>
      
      {Object.keys(groupedComments).length > 0 ? (
        <div className="space-y-10">
          {Object.entries(groupedComments).map(([threadId, threadComments]) => (
            <div key={threadId} className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
              <div className="bg-gray-50 dark:bg-gray-700 p-4 border-b border-gray-200 dark:border-gray-600">
                <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
                  {getThreadTitle(threadId)}
                </h2>
                <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                  Thread ID: {threadId} â€¢ {threadComments.length} comment{threadComments.length !== 1 ? 's' : ''}
                </p>
              </div>
              
              <div className="divide-y divide-gray-200 dark:divide-gray-700">
                {threadComments.map((comment, index) => (
                  <div key={comment.id} className="p-5">
                    <div className="flex items-start mb-2">
                      <div className="bg-primary/10 rounded-full p-2 mr-3">
                        <svg 
                          xmlns="http://www.w3.org/2000/svg" 
                          viewBox="0 0 24 24" 
                          fill="none" 
                          stroke="currentColor" 
                          strokeWidth="2" 
                          strokeLinecap="round" 
                          strokeLinejoin="round" 
                          className="w-5 h-5 text-primary"
                        >
                          <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path>
                          <circle cx="12" cy="7" r="4"></circle>
                        </svg>
                      </div>
                      <div className="flex-1">
                        <div className="flex justify-between items-center mb-1">
                          <h3 className="font-medium text-gray-900 dark:text-white">{comment.authorName}</h3>
                          <span className="text-xs text-gray-500 dark:text-gray-400">
                            {formatDate(comment.createdAt)}
                          </span>
                        </div>
                        <div className="prose dark:prose-invert max-w-none">
                          <p className="text-gray-700 dark:text-gray-300">{comment.content}</p>
                        </div>
                      </div>
                    </div>
                    
                    {/* Add reply button - disabled as this is just for display */}
                    <div className="mt-3 flex justify-end">
                      <button
                        disabled
                        className="text-sm text-gray-500 dark:text-gray-400 flex items-center opacity-50 cursor-not-allowed"
                      >
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="w-4 h-4 mr-1"
                        >
                          <polyline points="15 10 20 15 15 20"></polyline>
                          <path d="M4 4v7a4 4 0 0 0 4 4h12"></path>
                        </svg>
                        Reply
                      </button>
                    </div>
                    
                    {/* Divider for all but the last comment */}
                    {index < threadComments.length - 1 && (
                      <div className="mt-4 border-t border-gray-100 dark:border-gray-800"></div>
                    )}
                  </div>
                ))}
              </div>
              
              <div className="bg-gray-50 dark:bg-gray-700 p-4 border-t border-gray-200 dark:border-gray-600">
                <div className="flex items-center justify-between">
                  <Link
                    href="/forum"
                    className="text-sm text-primary hover:text-primary/80 flex items-center"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      className="w-4 h-4 mr-1"
                    >
                      <path d="m12 19-7-7 7-7"></path>
                      <path d="M19 12H5"></path>
                    </svg>
                    Back to Forum
                  </Link>
                  
                  <button
                    disabled
                    className="px-4 py-2 bg-primary text-white rounded-lg opacity-50 cursor-not-allowed"
                  >
                    Add Comment
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center p-12 bg-gray-50 dark:bg-gray-800 rounded-lg border border-dashed border-gray-300 dark:border-gray-700">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
            className="w-12 h-12 mx-auto text-gray-400 dark:text-gray-600 mb-4"
          >
            <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
          </svg>
          <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">No discussions yet</h3>
          <p className="text-gray-600 dark:text-gray-400 max-w-md mx-auto mb-6">
            There are no persona-generated discussions yet. Activate personas in the admin panel to start generating discussions.
          </p>
          <Link
            href="/admin/personas"
            className="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors"
          >
            Go to Persona Management
          </Link>
        </div>
      )}
    </div>
  );
};

export default PersonaDiscussionsPage;